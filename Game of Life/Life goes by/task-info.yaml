type: edu
custom_name: stage3
files:
- name: src/life/Main.java
  visible: true
  text: |+
    package life;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Random;
    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            int side = scanner.nextInt();
            int seed = scanner.nextInt();
            int gen = scanner.nextInt();

            Universe world = new Universe(side, seed, gen);
            world.generate();
            // world.showUniverse();
        }
    }

    class Universe {
        int N;  // side size
        long S; // seed
        int M;  // number of generations
        Random random;
        List<List<Character>> universe = new ArrayList<>();

        public Universe(int N, long S, int M) {
            this.N = N;
            this.S = S;
            this.M = M;
            this.initUniverse(this.S);
        }

        public Universe(int N, int M) {
            this.N = N;
            this.M = M;
            this.initUniverse();
        }

        private void initUniverse(long seed) {
            this.random = new Random(S);
            for (int i = 0; i < this.getN(); i++) {
                List<Character> row = new ArrayList<>();
                for (int j = 0; j < this.getN(); j++) {
                    row.add(this.random.nextBoolean()? 'O': ' ');
                }
                this.universe.add(row);
            }
        }

        private void initUniverse() {
            for (int i = 0; i < this.getN(); i++) {
                List<Character> row = new ArrayList<>();
                for (int j = 0; j < this.getN(); j++) {
                    row.add(' ');
                }
                this.universe.add(row);
            }
        }

        public void showUniverse() {
            for (var row : this.getUniverse()) {
                for (var state : row) {
                    System.out.print(state);
                }
                System.out.println();
            }
        }

        public void generate() {
            Algorithm evolve = new Evolve();
            for (int i = 0; i < this.getM(); i++) {
                this.universe = evolve.update(this).getUniverse();
            }
            this.showUniverse();
        }

        public boolean isAlive(int i, int j) {
            return this.universe.get(i).get(j) == 'O';
        }

        public int getN() {
            return N;
        }

        public long getS() {
            return S;
        }

        public int getM() {
            return M;
        }

        public List<List<Character>> getUniverse() {
            return universe;
        }
    }

    interface Algorithm {
        Universe update(Universe before);
    }


    class Evolve implements Algorithm {

        @Override
        public Universe update(Universe before) {
            Universe after = new Universe(before.getN(), before.getM());
            int side = before.getN();
            for (int i = 0; i < side; i++) {
                for (int j = 0; j < side; j++) {
                    int n = checkSurrounding(i, j, before.getUniverse());
                    if (before.isAlive(i, j)) {
                        if (n < 2 || n > 3) {
                            // die boredom or overpopulation
                            after.getUniverse().get(i).set(j, ' ');
                        } else {
                            after.getUniverse().get(i).set(j, 'O');
                        }
                    } else {
                        if (n == 3) {
                            // resurrect current cell
                            after.getUniverse().get(i).set(j, 'O');
                        } else {
                            after.getUniverse().get(i).set(j, ' ');
                        }
                    }
                }
                // System.out.println("\n----------------\n");
            }
            return after;
        }

        // count surrounding cells
        private int checkSurrounding(int i, int j, List<List<Character>> oldUniverse) {
            int neighbors = 0;
            int side = oldUniverse.size();
            // eight neighbors:
            // ui -> upper i | di -> down i | lj -> left j | rj -> right j
            int ui = i-1 < 0? side+i-1: i-1;
            int di = i+1 > side-1? i+1-side: i+1;
            int lj = j-1 < 0? side+j-1: j-1;
            int rj = j+1 > side-1? j+1-side: j+1;

            neighbors += oldUniverse.get(ui).get(lj)=='O'? 1: 0;
            neighbors += oldUniverse.get(ui).get(j)=='O'? 1: 0;
            neighbors += oldUniverse.get(ui).get(rj)=='O'? 1: 0;
            neighbors += oldUniverse.get(i).get(lj)=='O'? 1: 0;
            neighbors += oldUniverse.get(i).get(rj)=='O'? 1: 0;
            neighbors += oldUniverse.get(di).get(lj)=='O'? 1: 0;
            neighbors += oldUniverse.get(di).get(j)=='O'? 1: 0;
            neighbors += oldUniverse.get(di).get(rj)=='O'? 1: 0;
            // System.out.println(neighbors);
            return neighbors;
        }
    }



  learner_created: false
- name: test/GameOfLifeTest.java
  visible: false
  text: |2

    import common.GameOfLifeStage3Test;

    public class GameOfLifeTest extends GameOfLifeStage3Test {

    }
  learner_created: false
- name: test/common/CheckResultUtil.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.testcase.CheckResult

    operator fun CheckResult.component1(): Boolean = isCorrect
    operator fun CheckResult.component2(): String? = feedback

    fun fail(message: String) = CheckResult(false, message)  // TODO: add to repo
  learner_created: false
- name: test/common/ClueWithChecker.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase

    sealed class ClueWithChecker(val input: String) {
        fun toTestCase(): TestCase<ClueWithChecker> {
            return TestCase<ClueWithChecker>().setInput(input).setAttach(this)
        }
    }

    class ClueWithPredefinedFeedbackChecker(
            val predefinedFeedback: String,
            input: String,
            val checker: (String) -> Boolean
    ) : ClueWithChecker(input)

    class ClueWithDynamicFeedbackChecker(
            input: String,
            val checker: (String) -> CheckResult
    ) : ClueWithChecker(input)

    fun createDynamicFeedbackTest(input: String = "", checker: (String) -> CheckResult): TestCase<ClueWithChecker> {
        return ClueWithDynamicFeedbackChecker(
                input = input,
                checker = checker
        ).toTestCase()
    }

    fun checkClueWithCheckerTest(reply: String, clue: ClueWithChecker): CheckResult {
        return try {
            when (clue) {
                is ClueWithDynamicFeedbackChecker -> clue.checker(reply)
                is ClueWithPredefinedFeedbackChecker -> CheckResult(clue.checker(reply), clue.predefinedFeedback)
            }
        } catch (e: AssertionError) {
            if (clue is ClueWithPredefinedFeedbackChecker) {
                fail(clue.predefinedFeedback)
            } else {
                CheckResult.FALSE
            }
        }
    }
  learner_created: false
- name: test/common/GameOfLifeStage3Test.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.stage.BaseStageTest
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase
    import life.Main

    abstract class GameOfLifeStage3Test : BaseStageTest<ClueWithChecker>(Main::class.java) {

        override fun generate(): List<TestCase<ClueWithChecker>> {
            // two times:
            return (5..MAX_SIZE).flatMap(::stage3Tests) + (5..MAX_SIZE).flatMap(::stage3Tests)
        }

        override fun check(reply: String, clue: ClueWithChecker): CheckResult {
            return checkClueWithCheckerTest(reply = reply, clue = clue)
        }

        companion object {
            const val MAX_SIZE = 10
        }
    }

    fun stage3Tests(universeSize: Int): List<TestCase<ClueWithChecker>> {
        return listOf(
                createDynamicFeedbackTest("$universeSize\n") { reply ->
                    @Suppress("FoldInitializerAndIfToElvis")
                    val generations = reply
                            .toLowerCase()
                            .lines()
                            .filter { it.isNotEmpty() }
                            .joinToString("\n")
                            .split("generation".toRegex())
                            .drop(1)
                            .map {
                                val lines = it.lines()
                                val (idString, aliveString) = lines
                                val map = lines.drop(2)

                                if (!map.canBeMap(universeSize)) {
                                    return@createDynamicFeedbackTest fail("Can't read map in:\n$it\n")
                                }

                                val id = intRegex.find(idString)?.groupValues?.firstOrNull()?.toInt()
                                if (id == null) {
                                    return@createDynamicFeedbackTest fail("Can't find generation ID:\n$it\n")
                                }

                                val alive = intRegex.find(aliveString)?.groupValues?.firstOrNull()?.toInt()
                                if (alive == null) {
                                    return@createDynamicFeedbackTest fail("Can't find alive count:\n$it\n")
                                }

                                val generation = Generation(id, alive, map)
                                val aliveOnMap = generation.aliveOnMap(universeSize)

                                if (aliveOnMap != alive) {
                                    return@createDynamicFeedbackTest fail(
                                            "Alive count is wrong ($alive expected, $aliveOnMap got):\n$it\n"
                                    )
                                }

                                return@map generation
                            }

                    if (generations.isEmpty()) {
                        return@createDynamicFeedbackTest fail("Your program doesn't output generations for size $universeSize")
                    }

                    if (generations.first().id != 1) {
                        return@createDynamicFeedbackTest fail("First generation has number ${generations.first().id}")
                    }

                    val diffs = generations.windowed(2)

                    diffs.forEach { (prev, next) ->
                        if (prev.id + 1 != next.id) {
                            return@createDynamicFeedbackTest fail("ID of the generation #${prev.id + 1} is wrong (${next.id})")
                        }

                        if (!prev.evolvesTo(next, universeSize)) {
                            return@createDynamicFeedbackTest fail("Wrong evolution from #${prev.id} to #${prev.id + 1}")
                        }
                    }

                    return@createDynamicFeedbackTest CheckResult.TRUE
                }
        )
    }

    val intRegex = """(\d)+""".toRegex()

    fun List<String>.canBeMap(universeSize: Int): Boolean {
        if (this.size < universeSize) {
            return false
        }

        return this.take(universeSize).all { it.length >= universeSize }
    }

    data class Generation(val id: Int, val alive: Int, val map: List<String>) {
        fun aliveOnMap(universeSize: Int): Int {
            return (0 until universeSize)
                    .flatMap { y -> (0 until universeSize).map { x -> x to y } }
                    .map { (x, y) -> map[x][y] }
                    .count { it.isAlive() }
        }

        fun evolvesTo(other: Generation, universeSize: Int): Boolean {
            return (0 until universeSize)
                    .flatMap { y -> (0 until universeSize).map { x -> x to y } }
                    .map { (x, y) ->
                        if (map[x][y].isAlive()) {
                            if (aliveNeighbours(x, y, universeSize) in setOf(2, 3)) {
                                other.map[x][y].isAlive()
                            } else {
                                !other.map[x][y].isAlive()
                            }
                        } else {
                            if (aliveNeighbours(x, y, universeSize) == 3) {
                                other.map[x][y].isAlive()
                            } else {
                                !other.map[x][y].isAlive()
                            }
                        }
                    }
                    .all { it }
        }

        fun aliveNeighbours(x: Int, y: Int, universeSize: Int): Int {
            var north = x - 1
            if (north < 0) north = universeSize - 1
            var south = x + 1
            if (south > universeSize - 1) south = 0
            var west = y - 1
            if (west < 0) west = universeSize - 1
            var east = y + 1
            if (east > universeSize - 1) east = 0

            var aliveNeighbours = 0
            if (map[north][west].isAlive()) ++aliveNeighbours
            if (map[north][y].isAlive()) ++aliveNeighbours
            if (map[north][east].isAlive()) ++aliveNeighbours
            if (map[x][west].isAlive()) ++aliveNeighbours
            if (map[x][east].isAlive()) ++aliveNeighbours
            if (map[south][west].isAlive()) ++aliveNeighbours
            if (map[south][y].isAlive()) ++aliveNeighbours
            if (map[south][east].isAlive()) ++aliveNeighbours

            return aliveNeighbours
        }

        fun Char.isAlive(): Boolean = this != ' '
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/54/stages/296/implement
status: Solved
record: 2
